{"ast":null,"code":"/**\r\n * --------------------------------------------------------------------------\r\n * Bootstrap (v5.2.0): dom/manipulator.js\r\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\r\n * --------------------------------------------------------------------------\r\n */\nfunction normalizeData(value) {\n  if (value === 'true') {\n    return true;\n  }\n\n  if (value === 'false') {\n    return false;\n  }\n\n  if (value === Number(value).toString()) {\n    return Number(value);\n  }\n\n  if (value === '' || value === 'null') {\n    return null;\n  }\n\n  if (typeof value !== 'string') {\n    return value;\n  }\n\n  try {\n    return JSON.parse(decodeURIComponent(value));\n  } catch {\n    return value;\n  }\n}\n\nfunction normalizeDataKey(key) {\n  return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`);\n}\n\nconst Manipulator = {\n  setDataAttribute(element, key, value) {\n    element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);\n  },\n\n  removeDataAttribute(element, key) {\n    element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);\n  },\n\n  getDataAttributes(element) {\n    if (!element) {\n      return {};\n    }\n\n    const attributes = {};\n    const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'));\n\n    for (const key of bsKeys) {\n      let pureKey = key.replace(/^bs/, '');\n      pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);\n      attributes[pureKey] = normalizeData(element.dataset[key]);\n    }\n\n    return attributes;\n  },\n\n  getDataAttribute(element, key) {\n    return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));\n  }\n\n};\nexport default Manipulator;","map":{"version":3,"names":["normalizeData","value","Number","toString","JSON","parse","decodeURIComponent","normalizeDataKey","key","replace","chr","toLowerCase","Manipulator","setDataAttribute","element","setAttribute","removeDataAttribute","removeAttribute","getDataAttributes","attributes","bsKeys","Object","keys","dataset","filter","startsWith","pureKey","charAt","slice","length","getDataAttribute","getAttribute"],"sources":["C:/Users/centr/Documents/Materiais de Estudo/ProjetoReact/frontweb/node_modules/bootstrap/js/src/dom/manipulator.js"],"sourcesContent":["/**\r\n * --------------------------------------------------------------------------\r\n * Bootstrap (v5.2.0): dom/manipulator.js\r\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\r\n * --------------------------------------------------------------------------\r\n */\r\n\r\nfunction normalizeData(value) {\r\n  if (value === 'true') {\r\n    return true\r\n  }\r\n\r\n  if (value === 'false') {\r\n    return false\r\n  }\r\n\r\n  if (value === Number(value).toString()) {\r\n    return Number(value)\r\n  }\r\n\r\n  if (value === '' || value === 'null') {\r\n    return null\r\n  }\r\n\r\n  if (typeof value !== 'string') {\r\n    return value\r\n  }\r\n\r\n  try {\r\n    return JSON.parse(decodeURIComponent(value))\r\n  } catch {\r\n    return value\r\n  }\r\n}\r\n\r\nfunction normalizeDataKey(key) {\r\n  return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`)\r\n}\r\n\r\nconst Manipulator = {\r\n  setDataAttribute(element, key, value) {\r\n    element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value)\r\n  },\r\n\r\n  removeDataAttribute(element, key) {\r\n    element.removeAttribute(`data-bs-${normalizeDataKey(key)}`)\r\n  },\r\n\r\n  getDataAttributes(element) {\r\n    if (!element) {\r\n      return {}\r\n    }\r\n\r\n    const attributes = {}\r\n    const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'))\r\n\r\n    for (const key of bsKeys) {\r\n      let pureKey = key.replace(/^bs/, '')\r\n      pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length)\r\n      attributes[pureKey] = normalizeData(element.dataset[key])\r\n    }\r\n\r\n    return attributes\r\n  },\r\n\r\n  getDataAttribute(element, key) {\r\n    return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`))\r\n  }\r\n}\r\n\r\nexport default Manipulator\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;EAC5B,IAAIA,KAAK,KAAK,MAAd,EAAsB;IACpB,OAAO,IAAP;EACD;;EAED,IAAIA,KAAK,KAAK,OAAd,EAAuB;IACrB,OAAO,KAAP;EACD;;EAED,IAAIA,KAAK,KAAKC,MAAM,CAACD,KAAD,CAAN,CAAcE,QAAd,EAAd,EAAwC;IACtC,OAAOD,MAAM,CAACD,KAAD,CAAb;EACD;;EAED,IAAIA,KAAK,KAAK,EAAV,IAAgBA,KAAK,KAAK,MAA9B,EAAsC;IACpC,OAAO,IAAP;EACD;;EAED,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC7B,OAAOA,KAAP;EACD;;EAED,IAAI;IACF,OAAOG,IAAI,CAACC,KAAL,CAAWC,kBAAkB,CAACL,KAAD,CAA7B,CAAP;EACD,CAFD,CAEE,MAAM;IACN,OAAOA,KAAP;EACD;AACF;;AAED,SAASM,gBAAT,CAA0BC,GAA1B,EAA+B;EAC7B,OAAOA,GAAG,CAACC,OAAJ,CAAY,QAAZ,EAAsBC,GAAG,IAAK,IAAGA,GAAG,CAACC,WAAJ,EAAkB,EAAnD,CAAP;AACD;;AAED,MAAMC,WAAW,GAAG;EAClBC,gBAAgB,CAACC,OAAD,EAAUN,GAAV,EAAeP,KAAf,EAAsB;IACpCa,OAAO,CAACC,YAAR,CAAsB,WAAUR,gBAAgB,CAACC,GAAD,CAAM,EAAtD,EAAyDP,KAAzD;EACD,CAHiB;;EAKlBe,mBAAmB,CAACF,OAAD,EAAUN,GAAV,EAAe;IAChCM,OAAO,CAACG,eAAR,CAAyB,WAAUV,gBAAgB,CAACC,GAAD,CAAM,EAAzD;EACD,CAPiB;;EASlBU,iBAAiB,CAACJ,OAAD,EAAU;IACzB,IAAI,CAACA,OAAL,EAAc;MACZ,OAAO,EAAP;IACD;;IAED,MAAMK,UAAU,GAAG,EAAnB;IACA,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYR,OAAO,CAACS,OAApB,EAA6BC,MAA7B,CAAoChB,GAAG,IAAIA,GAAG,CAACiB,UAAJ,CAAe,IAAf,KAAwB,CAACjB,GAAG,CAACiB,UAAJ,CAAe,UAAf,CAApE,CAAf;;IAEA,KAAK,MAAMjB,GAAX,IAAkBY,MAAlB,EAA0B;MACxB,IAAIM,OAAO,GAAGlB,GAAG,CAACC,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,CAAd;MACAiB,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,CAAf,EAAkBhB,WAAlB,KAAkCe,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiBF,OAAO,CAACG,MAAzB,CAA5C;MACAV,UAAU,CAACO,OAAD,CAAV,GAAsB1B,aAAa,CAACc,OAAO,CAACS,OAAR,CAAgBf,GAAhB,CAAD,CAAnC;IACD;;IAED,OAAOW,UAAP;EACD,CAxBiB;;EA0BlBW,gBAAgB,CAAChB,OAAD,EAAUN,GAAV,EAAe;IAC7B,OAAOR,aAAa,CAACc,OAAO,CAACiB,YAAR,CAAsB,WAAUxB,gBAAgB,CAACC,GAAD,CAAM,EAAtD,CAAD,CAApB;EACD;;AA5BiB,CAApB;AA+BA,eAAeI,WAAf"},"metadata":{},"sourceType":"module"}